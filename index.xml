<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bob&#39;s Site</title>
    <link>https://bobxwang.github.io/</link>
    <description>Recent content on Bob&#39;s Site</description>
    <image>
      <title>Bob&#39;s Site</title>
      <url>https://bobxwang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://bobxwang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-ch</language>
    <lastBuildDate>Thu, 16 Apr 2020 20:17:59 +0000</lastBuildDate>
    <atom:link href="https://bobxwang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>spring-cloud中服务发现相关的类</title>
      <link>https://bobxwang.github.io/2020/04/16/discovery-in-sc/</link>
      <pubDate>Thu, 16 Apr 2020 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2020/04/16/discovery-in-sc/</guid>
      <description>服务拆分后离不开服务间的调用，那么怎么确定你要调用的一个服务，它所在的地址呢。 一般来讲这里涉及到服务发现，常见的有如下几种方案。 Client-side discovery Server-side discovery 在S</description>
    </item>
    <item>
      <title>spring-cloud中服务自注册的相关类</title>
      <link>https://bobxwang.github.io/2020/04/14/register-in-sc/</link>
      <pubDate>Tue, 14 Apr 2020 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2020/04/14/register-in-sc/</guid>
      <description>服务拆分后离不开注册，要不然就得手工维护每个实例所在的地址以及监听的端口，当服务一多，手工维护肯定不现实。 一般来讲有两种选择。 Self registration pattern 3rd party registration pattern</description>
    </item>
    <item>
      <title>GoLang内存模型</title>
      <link>https://bobxwang.github.io/2018/03/25/memory-in-go/</link>
      <pubDate>Sun, 25 Mar 2018 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2018/03/25/memory-in-go/</guid>
      <description>Go 内存模型阐明了一个Go程序对某变量的写入, 如何才能确保另一个读取该变量的Go程序监测到 忠告 程序在修改被多个Go程序同时访问的数据时必须序列</description>
    </item>
    <item>
      <title>Monid/Functor的一点认识</title>
      <link>https://bobxwang.github.io/2017/06/05/function-in-scala-md/</link>
      <pubDate>Mon, 05 Jun 2017 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2017/06/05/function-in-scala-md/</guid>
      <description>一个单子(Monad)说白了不过就是自函子范畴上的一个幺半群, 此话出自Haskell大神 Philip Wadler. 在自学scala的过程中, 好几次尝试着去学习Mo</description>
    </item>
    <item>
      <title>利用scala的宏达到map跟case class的互换</title>
      <link>https://bobxwang.github.io/2017/04/09/how-to-convert-a-map-2-class-in-scala/</link>
      <pubDate>Sun, 09 Apr 2017 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2017/04/09/how-to-convert-a-map-2-class-in-scala/</guid>
      <description>前段时间接触了scala的宏，相对C语言的 ＃define 可以将其理解成一个更先进的版本，没多少实战经验的可以将其理解成一个复杂的查找替换工具</description>
    </item>
    <item>
      <title>Spring异步返回时如何将线程值由请求线程传递到工作线程</title>
      <link>https://bobxwang.github.io/2017/02/09/how-to-deliver-mdcvalue-when-spring-return-callable:deferred:rxjava/</link>
      <pubDate>Thu, 09 Feb 2017 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2017/02/09/how-to-deliver-mdcvalue-when-spring-return-callable:deferred:rxjava/</guid>
      <description>自从servlet3.0后，可以利用 AsyncContext 来进行异步处理，释放请求线程。在spring中随后也推出了 WebAsyncTask 跟 DeferredResult 来简化程序的编写，这个在上文将rxja</description>
    </item>
    <item>
      <title>改造SpringMVC使其支持返回rx.Observable的类型</title>
      <link>https://bobxwang.github.io/2017/02/06/combilne-rxjava-in-spring-mvc/</link>
      <pubDate>Mon, 06 Feb 2017 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2017/02/06/combilne-rxjava-in-spring-mvc/</guid>
      <description>rxjava是netflix开源出来的一款响应式编程类库，是Reactive Extensions(Rx)在jvm平台上的一个实现，是一个集成</description>
    </item>
    <item>
      <title>整合thrift到spring cloud</title>
      <link>https://bobxwang.github.io/2017/01/17/combine-thrift-in-spring-cloud/</link>
      <pubDate>Tue, 17 Jan 2017 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2017/01/17/combine-thrift-in-spring-cloud/</guid>
      <description>thrift是由facebook开源并贡献到apache的一款高效，支持多语言的远程服务调用框架，就像gRPC，在前面的博文中有对其做一个简</description>
    </item>
    <item>
      <title>日志监控整合LogBack&#43;Kafka&#43;Spark</title>
      <link>https://bobxwang.github.io/2016/07/05/combine-logback-kafka-spark/</link>
      <pubDate>Tue, 05 Jul 2016 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2016/07/05/combine-logback-kafka-spark/</guid>
      <description>kafka是linkedin开发并开源出来的一个分布式MQ系统，现在是Apache的一个顶级项目。spark是一个加州大学伯克利分校的AMP</description>
    </item>
    <item>
      <title>Netflix Eureka 服务发现之手动注册</title>
      <link>https://bobxwang.github.io/2016/04/03/custom-register-service-in-eureka/</link>
      <pubDate>Sun, 03 Apr 2016 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2016/04/03/custom-register-service-in-eureka/</guid>
      <description>Eureka是netflix开源出来的一款服务发现注册框架，就像etcd，在前面关于SpringCloud的文章中有讲述，此文主要想讲下脱离</description>
    </item>
    <item>
      <title>Spray框架之自定义权限验证</title>
      <link>https://bobxwang.github.io/2015/08/03/custom-authenticator-in-spray/</link>
      <pubDate>Mon, 03 Aug 2015 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2015/08/03/custom-authenticator-in-spray/</guid>
      <description>Spray内置了一此标准权限验证，像HttpBasicAuthenticator，然而如果我们需要一些其它的验证怎么办？在这篇文章里我们会谈</description>
    </item>
    <item>
      <title>Spring Cloud--基础概念</title>
      <link>https://bobxwang.github.io/2015/06/05/basic-knlowledge-in-spring-cloud/</link>
      <pubDate>Fri, 05 Jun 2015 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2015/06/05/basic-knlowledge-in-spring-cloud/</guid>
      <description>当今微服务在博客，社交媒体或会议演讲中获得越来越多关注，同时社区中也有不少怀疑论者，认为其并不是很新东西，而是对SOA架构的重新包装。然而微</description>
    </item>
    <item>
      <title>Apache Thrift 基本类信息</title>
      <link>https://bobxwang.github.io/2015/02/03/main-class-info-in-thrift/</link>
      <pubDate>Tue, 03 Feb 2015 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2015/02/03/main-class-info-in-thrift/</guid>
      <description>thrift最初是由Facebook开发并贡献出来的一款PRC库，可以进行跨语言的开发。 主要类 TProtocol 定义传输的是什么内容,客户服务端通过约定的协</description>
    </item>
    <item>
      <title>如何在Django1.6结合Python3.4版本中使用MySql</title>
      <link>https://bobxwang.github.io/2014/05/14/using-mysql-in-djangoonepointsix-and-pythonthreepointfour/</link>
      <pubDate>Wed, 14 May 2014 20:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2014/05/14/using-mysql-in-djangoonepointsix-and-pythonthreepointfour/</guid>
      <description>最近赶下新潮，用起了Python3.4跟Django1.6，数据库依然是MySql。 悲剧的是在Python2.7时代连接MySql的MySQ</description>
    </item>
    <item>
      <title>scala中的隐式转换</title>
      <link>https://bobxwang.github.io/2014/04/01/the-keyword-implicit-in-scala/</link>
      <pubDate>Tue, 01 Apr 2014 14:23:09 +0000</pubDate>
      <guid>https://bobxwang.github.io/2014/04/01/the-keyword-implicit-in-scala/</guid>
      <description>implicit 在scala中有一个关键字，implicit，就是我们这篇文章的主题。 先看一个简单的例子： def display(input:String) = println(input) 我们可以看到display函数的定义只接</description>
    </item>
    <item>
      <title>Spark随谈--基础概念</title>
      <link>https://bobxwang.github.io/2014/01/05/the-basic-concept-of-spark/</link>
      <pubDate>Sun, 05 Jan 2014 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2014/01/05/the-basic-concept-of-spark/</guid>
      <description>Application:基于Spark的用户程序，包含了一个driver program和集群中多个executor Driver Program:运行Ap</description>
    </item>
    <item>
      <title>Asp.Net WebApi跟Spring Rest的Controller对比</title>
      <link>https://bobxwang.github.io/2013/10/09/compare-the-aspwebapi-with-spring-rest/</link>
      <pubDate>Wed, 09 Oct 2013 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2013/10/09/compare-the-aspwebapi-with-spring-rest/</guid>
      <description>自从11年底接触Asp.net Web Api开始到现在转眼也快三年了，做个日志对比下开源框架Spring Rest。 Asp.net Web Api Controller Select &amp;amp;&amp;amp; Spring Rest Controller Select 众所周知，H</description>
    </item>
    <item>
      <title>个人认为NET平台开发不可缺少的几个库</title>
      <link>https://bobxwang.github.io/2013/01/16/the-library-common-used-in-net/</link>
      <pubDate>Wed, 16 Jan 2013 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2013/01/16/the-library-common-used-in-net/</guid>
      <description>下面罗列一些个人认为NET平台开发不可缺少的几个库。 ORM NHibernate Dapper Simple.Data IOC/DI Spring.NET StructureMap Autofac Object Mapper EmitMapper ValueInjecter AutoMapper 其它 Redis Client Json.NET Service.Text Jil</description>
    </item>
    <item>
      <title>Netty框架中的几个核心概念</title>
      <link>https://bobxwang.github.io/2013/01/15/basis-knowledeg-in-netty/</link>
      <pubDate>Tue, 15 Jan 2013 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2013/01/15/basis-knowledeg-in-netty/</guid>
      <description>Netty 在java世界中是一个非常知名的通迅框架，目前最新版本应该是5.x,不过3.x版本相对来讲在业界用的比较广泛，主要是从4.x版本开始重写了</description>
    </item>
    <item>
      <title>Asp.net Web Api中的Basic Authentication认证</title>
      <link>https://bobxwang.github.io/2012/09/05/the-basic-authentication-in-asp.net-webapi/</link>
      <pubDate>Wed, 05 Sep 2012 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2012/09/05/the-basic-authentication-in-asp.net-webapi/</guid>
      <description>在如今各种OPEN API数不胜数的年代，如何保证调用方是受信任的，考虑到大多数OPEN API都是基于HTTP协议，此系列打算就以Basic A</description>
    </item>
    <item>
      <title>谈谈C/S跟B/S系统开发中各自的关注点</title>
      <link>https://bobxwang.github.io/2012/07/26/difference-between-cs-and-bs-system-develope/</link>
      <pubDate>Thu, 26 Jul 2012 16:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2012/07/26/difference-between-cs-and-bs-system-develope/</guid>
      <description>何为B/S系统，个人理解就是用浏览器打开的应用都可以称之为B/S系统，常见的就是一些网站了。 在B/S系统中，个人认为技术人员的积累主要在以下</description>
    </item>
    <item>
      <title>苹果应用不同状态切换时的处理</title>
      <link>https://bobxwang.github.io/2012/04/16/how-to-add-logic-when-lifestatus-changed-in-iphone/</link>
      <pubDate>Mon, 16 Apr 2012 16:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2012/04/16/how-to-add-logic-when-lifestatus-changed-in-iphone/</guid>
      <description>iphone 应用不同状态切换时回调的方法 application:didFinishLaunching:WithOptions: applicationDidBecomeActive: applicationWillEnterForeground: applicationWillResignActive: applicationDidEnterBackground: applicationWillTerminate: application:didChangeStatusBarFrame: UIApplicationDidReceiveMemoryWarningNotification: iphone 应用的几个状态 Not running:程序完全没有执行。 Inactive:程序在前景执行但是停止接</description>
    </item>
    <item>
      <title>NET平台WEB开发中微软框架外的选择--Nancy</title>
      <link>https://bobxwang.github.io/2012/03/10/another-select-in-net-web-develope-using-nancy/</link>
      <pubDate>Sat, 10 Mar 2012 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2012/03/10/another-select-in-net-web-develope-using-nancy/</guid>
      <description>NET平台做B/S开发，常见的比较正统的就是webform跟mvc两个框架，webform把B/S开发本质HTTP协议封装的死死的，将win</description>
    </item>
    <item>
      <title>WEB开发中需要知道的缓存知识</title>
      <link>https://bobxwang.github.io/2010/06/05/the-basic-cache-knowledge-in-http/</link>
      <pubDate>Sat, 05 Jun 2010 12:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2010/06/05/the-basic-cache-knowledge-in-http/</guid>
      <description>WEB缓存游走于服务器和客户端间，服务器数量可能是1个或多个，客户端也可能是1个或多个，使用缓存的2个主要原因： 降低延迟：缓存离客户端更近，</description>
    </item>
    <item>
      <title>Django中表单基本知识</title>
      <link>https://bobxwang.github.io/2010/05/08/the-form-basic-knowledge-in-django/</link>
      <pubDate>Sat, 08 May 2010 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2010/05/08/the-form-basic-knowledge-in-django/</guid>
      <description>Form基本物件 from django import forms class ContactForm(forms.Form): subject = forms.CharField(max_lenth=100) sender = forms.EmailField() 在View中使用Form from django.shortcuts import render from django.http import HttpResponseRedirect from django.core.urlresolvers import reverse def contact(request): if request.method == &amp;#39;POST&amp;#39;: from = ContactForm(request.POST) if form.is_valid(): subject = form.cleaned_data[&amp;#39;subject&amp;#39;] sender = form.cleaned_data[&amp;#39;sender&amp;#39;] #according this data to change db or other logic</description>
    </item>
    <item>
      <title>Django路由配置基本知识</title>
      <link>https://bobxwang.github.io/2010/05/05/the-route-basic-knowledge-in-django/</link>
      <pubDate>Wed, 05 May 2010 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2010/05/05/the-route-basic-knowledge-in-django/</guid>
      <description>命名路由参数 vs. 非命名路由参数 如果匹配到命名路由，则优先选用，忽略掉非命名路由. 把所有参数都传递到非命名路由中. 所有参数捕获的值都是字符串 给V</description>
    </item>
    <item>
      <title>Django的Model基础知识</title>
      <link>https://bobxwang.github.io/2010/05/03/the-model-basic-knowledge-in-django/</link>
      <pubDate>Mon, 03 May 2010 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2010/05/03/the-model-basic-knowledge-in-django/</guid>
      <description>Django中的Model层，负责的是跟数据库表间的映射，同是也是一个ORM。数据库表间关系无非三种，Django中都做了很好的支持。下面是</description>
    </item>
    <item>
      <title>如何在web.py处理请求前后添加自己的逻辑</title>
      <link>https://bobxwang.github.io/2010/04/03/how-add-self-logic-in-webrequest-before-or-after-in-webpy/</link>
      <pubDate>Sat, 03 Apr 2010 16:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2010/04/03/how-add-self-logic-in-webrequest-before-or-after-in-webpy/</guid>
      <description>web.py在python百花齐放的web开发框架中，可谓是一个简单却功能强大的轻量级框架，麻雀虽小，五脏俱全。 一般在web应用中常见的可能</description>
    </item>
    <item>
      <title>Python中的装饰器模式</title>
      <link>https://bobxwang.github.io/2010/04/02/the-basic-decorator-pattern-in-python/</link>
      <pubDate>Fri, 02 Apr 2010 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2010/04/02/the-basic-decorator-pattern-in-python/</guid>
      <description>装饰器使得函数和方法的封装(接收一个函数并返回增加版本的一个函数)更加容易和理解。 下面就是一个最简单的装饰器 def mydecorator(function): def _mydecorator(*args,**kw): #实际调用前处理 res = function(*args,**kw) #</description>
    </item>
    <item>
      <title>Python基础知识</title>
      <link>https://bobxwang.github.io/2010/04/01/the-basic-knowledge-in-python/</link>
      <pubDate>Thu, 01 Apr 2010 14:17:59 +0000</pubDate>
      <guid>https://bobxwang.github.io/2010/04/01/the-basic-knowledge-in-python/</guid>
      <description>下面罗列一些Python的基础知识。 # -- coding: utf-8 -- people = 30 cars = 40 buses = 15 #相当于c中的？：运算符 print (&amp;#39;cars &amp;gt; buses&amp;#39; if (cars &amp;gt; buses) else &amp;#39;cars &amp;lt; buses&amp;#39;) #判断&amp;#39;yes&amp;#3</description>
    </item>
    <item>
      <title>关于本人</title>
      <link>https://bobxwang.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://bobxwang.github.io/about/</guid>
      <description>王相，名相1，天朝外出务工人员，待解放微产阶级。1982年12月出生于浙江义乌，码农2一个。 A thoughtful guy living a simple life, working for bread, studying for interests, and thinking for hope. Usually using C#, Objective-C, Go to realize</description>
    </item>
  </channel>
</rss>
